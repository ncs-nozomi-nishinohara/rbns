// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizationClient is the client API for Organization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationClient interface {
	// Create is create orgnization
	Create(ctx context.Context, in *OrganizationEntity, opts ...grpc.CallOption) (*OrganizationEntity, error)
	// FindById is application id and organization id
	FindById(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationEntity, error)
	// FindAll is application is return organizations
	FindAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrganizationEntities, error)
	// Update is organization entity update
	Update(ctx context.Context, in *OrganizationUpdateEntity, opts ...grpc.CallOption) (*Empty, error)
	// Delete is organization entity delete
	Delete(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*Empty, error)
}

type organizationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationClient(cc grpc.ClientConnInterface) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) Create(ctx context.Context, in *OrganizationEntity, opts ...grpc.CallOption) (*OrganizationEntity, error) {
	out := new(OrganizationEntity)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Organization/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) FindById(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*OrganizationEntity, error) {
	out := new(OrganizationEntity)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Organization/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) FindAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrganizationEntities, error) {
	out := new(OrganizationEntities)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Organization/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Update(ctx context.Context, in *OrganizationUpdateEntity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Organization/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) Delete(ctx context.Context, in *OrganizationKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Organization/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServer is the server API for Organization service.
// All implementations must embed UnimplementedOrganizationServer
// for forward compatibility
type OrganizationServer interface {
	// Create is create orgnization
	Create(context.Context, *OrganizationEntity) (*OrganizationEntity, error)
	// FindById is application id and organization id
	FindById(context.Context, *OrganizationKey) (*OrganizationEntity, error)
	// FindAll is application is return organizations
	FindAll(context.Context, *Empty) (*OrganizationEntities, error)
	// Update is organization entity update
	Update(context.Context, *OrganizationUpdateEntity) (*Empty, error)
	// Delete is organization entity delete
	Delete(context.Context, *OrganizationKey) (*Empty, error)
	mustEmbedUnimplementedOrganizationServer()
}

// UnimplementedOrganizationServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationServer struct {
}

func (UnimplementedOrganizationServer) Create(context.Context, *OrganizationEntity) (*OrganizationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationServer) FindById(context.Context, *OrganizationKey) (*OrganizationEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedOrganizationServer) FindAll(context.Context, *Empty) (*OrganizationEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedOrganizationServer) Update(context.Context, *OrganizationUpdateEntity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationServer) Delete(context.Context, *OrganizationKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationServer) mustEmbedUnimplementedOrganizationServer() {}

// UnsafeOrganizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServer will
// result in compilation errors.
type UnsafeOrganizationServer interface {
	mustEmbedUnimplementedOrganizationServer()
}

func RegisterOrganizationServer(s grpc.ServiceRegistrar, srv OrganizationServer) {
	s.RegisterService(&Organization_ServiceDesc, srv)
}

func _Organization_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Organization/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Create(ctx, req.(*OrganizationEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Organization/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).FindById(ctx, req.(*OrganizationKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Organization/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).FindAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationUpdateEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Organization/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Update(ctx, req.(*OrganizationUpdateEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Organization/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).Delete(ctx, req.(*OrganizationKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Organization_ServiceDesc is the grpc.ServiceDesc for Organization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.protobuf.Organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Organization_Create_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _Organization_FindById_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _Organization_FindAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Organization_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Organization_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization.proto",
}
