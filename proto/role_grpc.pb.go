// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleClient interface {
	// RoleCreate is create role
	Create(ctx context.Context, in *RoleEntities, opts ...grpc.CallOption) (*RoleEntities, error)
	// FindById is find by id
	FindById(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*RoleEntity, error)
	// FindAll is find roles
	FindAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleEntities, error)
	// Update is role entity update
	Update(ctx context.Context, in *RoleUpdateEntity, opts ...grpc.CallOption) (*Empty, error)
	// Delete is role entity delete
	Delete(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*Empty, error)
	// GetPermissions is get permission to the role
	GetPermissions(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*PermissionEntities, error)
	// AddPermissions is add permission to the role
	AddPermissions(ctx context.Context, in *RoleReleationPermissions, opts ...grpc.CallOption) (*Empty, error)
	// DeletePermission is delete permission to the role
	DeletePermission(ctx context.Context, in *RoleReleationPermission, opts ...grpc.CallOption) (*Empty, error)
}

type roleClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleClient(cc grpc.ClientConnInterface) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) Create(ctx context.Context, in *RoleEntities, opts ...grpc.CallOption) (*RoleEntities, error) {
	out := new(RoleEntities)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) FindById(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*RoleEntity, error) {
	out := new(RoleEntity)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) FindAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleEntities, error) {
	out := new(RoleEntities)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) Update(ctx context.Context, in *RoleUpdateEntity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) Delete(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) GetPermissions(ctx context.Context, in *RoleKey, opts ...grpc.CallOption) (*PermissionEntities, error) {
	out := new(PermissionEntities)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) AddPermissions(ctx context.Context, in *RoleReleationPermissions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/AddPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleClient) DeletePermission(ctx context.Context, in *RoleReleationPermission, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ncs.protobuf.Role/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
// All implementations must embed UnimplementedRoleServer
// for forward compatibility
type RoleServer interface {
	// RoleCreate is create role
	Create(context.Context, *RoleEntities) (*RoleEntities, error)
	// FindById is find by id
	FindById(context.Context, *RoleKey) (*RoleEntity, error)
	// FindAll is find roles
	FindAll(context.Context, *Empty) (*RoleEntities, error)
	// Update is role entity update
	Update(context.Context, *RoleUpdateEntity) (*Empty, error)
	// Delete is role entity delete
	Delete(context.Context, *RoleKey) (*Empty, error)
	// GetPermissions is get permission to the role
	GetPermissions(context.Context, *RoleKey) (*PermissionEntities, error)
	// AddPermissions is add permission to the role
	AddPermissions(context.Context, *RoleReleationPermissions) (*Empty, error)
	// DeletePermission is delete permission to the role
	DeletePermission(context.Context, *RoleReleationPermission) (*Empty, error)
	mustEmbedUnimplementedRoleServer()
}

// UnimplementedRoleServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServer struct {
}

func (UnimplementedRoleServer) Create(context.Context, *RoleEntities) (*RoleEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoleServer) FindById(context.Context, *RoleKey) (*RoleEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedRoleServer) FindAll(context.Context, *Empty) (*RoleEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedRoleServer) Update(context.Context, *RoleUpdateEntity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoleServer) Delete(context.Context, *RoleKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoleServer) GetPermissions(context.Context, *RoleKey) (*PermissionEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedRoleServer) AddPermissions(context.Context, *RoleReleationPermissions) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissions not implemented")
}
func (UnimplementedRoleServer) DeletePermission(context.Context, *RoleReleationPermission) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedRoleServer) mustEmbedUnimplementedRoleServer() {}

// UnsafeRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServer will
// result in compilation errors.
type UnsafeRoleServer interface {
	mustEmbedUnimplementedRoleServer()
}

func RegisterRoleServer(s grpc.ServiceRegistrar, srv RoleServer) {
	s.RegisterService(&Role_ServiceDesc, srv)
}

func _Role_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleEntities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).Create(ctx, req.(*RoleEntities))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).FindById(ctx, req.(*RoleKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).FindAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdateEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).Update(ctx, req.(*RoleUpdateEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).Delete(ctx, req.(*RoleKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).GetPermissions(ctx, req.(*RoleKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_AddPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleReleationPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).AddPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/AddPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).AddPermissions(ctx, req.(*RoleReleationPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Role_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleReleationPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.protobuf.Role/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).DeletePermission(ctx, req.(*RoleReleationPermission))
	}
	return interceptor(ctx, in, info, handler)
}

// Role_ServiceDesc is the grpc.ServiceDesc for Role service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Role_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.protobuf.Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Role_Create_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _Role_FindById_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _Role_FindAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Role_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Role_Delete_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Role_GetPermissions_Handler,
		},
		{
			MethodName: "AddPermissions",
			Handler:    _Role_AddPermissions_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _Role_DeletePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
